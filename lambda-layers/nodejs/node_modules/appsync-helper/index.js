// Adapted from https://geromekevin.com/how-to-use-aws-appsync-in-lambda-functions/

const gql = require('graphql-tag');
const appsync = require('aws-appsync');
require('cross-fetch/polyfill');

class AppSyncClient {

  constructor(params) {  
    
    var graphql_params = {
      url: params.url,
      region: params.region,
      disableOffline: params.disableOffline || true,  // seems this must be true for use in Lambda? https://github.com/awslabs/aws-mobile-appsync-sdk-js/issues/102
    };

    var default_options = {
      query: {
        fetchPolicy: 'network-only',
        errorPolicy: 'all',
      }
    };

    switch (params.auth_type) {
      case "AWS_IAM":
        graphql_params.auth = {
          type: 'AWS_IAM',
          credentials: {
            accessKeyId: params.accessKey,
            secretAccessKey: params.secretKey,
            sessionToken: params.sessionToken
          }
        };
        break;
      default:
        throw new Error(`Failed to get AppSync client: unsupported auth type ${auth_type}`);
    }
    this.client = new appsync.AWSAppSyncClient(graphql_params, default_options);
  }

  async mutate(graphql, variables) {
    var mutation = gql(graphql);
    var response = await this.client.mutate({
      mutation: mutation, 
      variables: variables
    });
    return response; 
  }

  async query(graphql, fetch_policy = 'network-only') {
    var query = gql(graphql);
    const client = await this.client.hydrated();
    var response = await this.client.query({
      query: query, 
      fetchPolicy: fetch_policy
    });
    return response;
  }
}

module.exports = AppSyncClient; 